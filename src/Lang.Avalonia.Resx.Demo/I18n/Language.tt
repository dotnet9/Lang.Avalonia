<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------  
// <auto-generated>  
//     This code was generated by a tool.  
//     Changes to this file may cause incorrect behavior and will be lost if  
//     the code is regenerated.  
// </auto-generated>  
//------------------------------------------------------------------------------

<#
    const string ResourceFileName = "Resources.resx";
    
    // 读取所有资源键
    var resourceKeys = XElement.Load(this.Host.ResolvePath(ResourceFileName))
        .Elements("data")
        .Select(item => item.Attribute("name")?.Value)
        .Where(item => !string.IsNullOrEmpty(item))
        .ToList();

    // 构建层级结构：命名空间 -> 类名 -> 字段集合
    var namespaceGroups = new Dictionary<string, Dictionary<string, List<(string fieldName, string fullKey)>>>();

    foreach (var fullKey in resourceKeys)
    {
        var parts = fullKey.Split('.');
        string namespaceName;
        string className;
        string fieldName;

        // 根据不同层级处理命名空间和类名
        if (parts.Length == 1)
        {
            // 单层结构：默认命名空间Localization，类Language
            namespaceName = "Localization";
            className = "Language";
            fieldName = parts[0];
        }
        else if (parts.Length == 2)
        {
            // 双层结构：默认命名空间Localization，类为第一部分
            namespaceName = "Localization";
            className = parts[0];
            fieldName = parts[1];
        }
        else
        {
            // 三层及以上：前n-2部分为命名空间，第n-2部分为类名
            var namespaceParts = parts.Take(parts.Length - 2).ToArray();
            namespaceName = string.Join(".", namespaceParts);
            className = parts[parts.Length - 2];
            fieldName = parts[parts.Length - 1];
        }

        // 初始化命名空间分组
        if (!namespaceGroups.ContainsKey(namespaceName))
        {
            namespaceGroups[namespaceName] = new Dictionary<string, List<(string, string)>>();
        }

        // 初始化类分组
        var classGroups = namespaceGroups[namespaceName];
        if (!classGroups.ContainsKey(className))
        {
            classGroups[className] = new List<(string, string)>();
        }

        // 添加字段
        classGroups[className].Add((fieldName, fullKey));
    }

    // 生成代码
    foreach (var nsGroup in namespaceGroups)
    {
        var namespaceName = nsGroup.Key;
        var classGroups = nsGroup.Value;
#>
namespace <#= namespaceName #>
{
<#
        foreach (var classGroup in classGroups)
        {
            var className = classGroup.Key;
            var fields = classGroup.Value;
#>
    public static class <#= className #>
    {
<#
            foreach (var field in fields)
            {
#>
        public static readonly string <#= field.fieldName #> = "<#= field.fullKey #>";
<#
            }
#>
    }

<#
        }
#>
}

<#
    }
#>
